name: build-deploy

on:  
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RELEASE_NAME: scicat-be
  TAG: ${{ github.event.pull_request.head.sha }}
  HOST: scicat.development.psi.ch

jobs:

  build:
    uses: ./.github/workflows/build.yml
    with: 
      context: backend/.
      registry: ghcr.io
      image_name: ${{ github.repository }}
      tag: ${{ github.event.pull_request.head.sha }}
      push_condition: ${{ github.event_name == 'pull_request' }}

  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Set helm var
      id: helm_vars
      run: |
        ciVars=$(cat <<EOF
        {
          "repository": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
          "tag": "${{ env.TAG }}",
          "host": "${{ env.HOST }}"
        }
        EOF
        )
        echo "::set-output name=ciVars::$(echo $ciVars)"

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set helm configmaps
      id: helm_configmaps
      run: |
        configMaps=$(cat <<EOF
        {
          "${{ env.RELEASE_NAME }}-cm": 
            {
              "config.local.js": $(jq -R -s < helm_configs/development/catamel_cm/config.local.js),
              "login-callbacks.js": $(jq -R -s < helm_configs/development/catamel_cm/login-callbacks.js),
              "middleware.development.json": $(jq -R -s < helm_configs/development/catamel_cm/middleware.development.json)
            }
        }
        EOF
        )
        echo "::set-output name=configMaps::$(echo $configMaps)"

    - name: Deploy to k8s using helm
      id: helm-deploy
      uses: 'glopezep/helm@v1.7.1'
      with:
        release: '${{ env.RELEASE_NAME }}'
        namespace: 'scicat-development'
        chart: 'generic_service_chart'
        helm: helm3
        values: |
         configMaps: ${{ steps.helm_configmaps.outputs.configMaps }}
         ciVars: ${{ steps.helm_vars.outputs.ciVars }}
        value-files: "helm_configs/development/values.yaml"
        secrets: '${{ toJSON(secrets) }}'
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
