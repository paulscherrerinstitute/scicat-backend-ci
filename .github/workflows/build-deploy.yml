name: build-deploy

on:  
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build-deploy:

    runs-on: ubuntu-latest

    steps:
    # - name: Set docker repository name and tag
    #   id: docker_repository
    #   run: |
    #     echo "::set-output name=image.repository::$(echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})"
    #     echo "::set-output name=image.tag::$(echo sha-${{ github.event.pull_request.head.sha }} | cut -c1-12)"

    - name: Set helm var
      id: helm_vars
      run: |
        image=$(cat <<EOF
        {
          "repository": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
          "tag": "${{ github.event.pull_request.head.sha }}"
        }
        EOF
        )
        echo "::set-output name=image::$image"

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set helm configmaps
      id: helm_configmaps
      run: |
        echo ${{steps.helm_vars.outputs.image}}

    # - name: Log in to the Container registry
    #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
    #   with:
    #     registry: ${{ env.REGISTRY }}
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Extract metadata (tags, labels) for Docker
    #   id: meta
    #   uses: docker/metadata-action@v3.6.2
    #   with:
    #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    #     tags: |
    #       type=raw,value=${{github.event.pull_request.head.sha}}
    
    # - name: Build and push Docker image
    #   id: build-and-push
    #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
    #   with:
    #     context: backend/.
    #     push: ${{ github.event_name == 'pull_request' }}
    #     tags: ${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}

    # - name: Deploy to k8s using helm
    #   id: helm-deploy
    #   uses: 'glopezep/helm@v1.7.1'
    #   with:
    #     release: 'catamel-github'
    #     namespace: 'scicat-development'
    #     chart: 'generic_service_chart'
    #     helm: helm3
    #     dry-run: true
    #     values: |
    #       configMaps: ${{ toJSON(steps.helm_configmaps.outputs.configMaps) }}
    #     value-files: "helm_configs/development/values.yaml"
    #   env:
    #     KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
